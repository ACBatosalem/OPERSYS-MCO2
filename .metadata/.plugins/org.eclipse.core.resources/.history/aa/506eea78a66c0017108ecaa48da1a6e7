package caltrain;

import java.util.ArrayList;

public class TrackController {
	
	public ArrayList<Station> allStations = new ArrayList<Station>();
	public CalTrain model;
	public TrackView view;
	
	public TrackController(CalTrain model, TrackView view){
		
		this.model = model;
		this.view = view;
		
		this.view.addTrain();
		
		logic();
		
		view.scene.setOnKeyPressed(e -> {
			switch(e.getCode()){
			case ENTER: this.view.addTrain(); break;
			case P: this.view.anim.get(0).pause(); break;
			case O: this.view.anim.get(0).play(); break;
			}
		});
	}
	
	public void createStation(int i){
		allStations.add(model.station_init(0));
		view.createStation();
	}
	
	public void createPassenger(){
		Passenger p = new Passenger(allStations.get(0), model, 0, allStations.get(1));
	}
	
	public void logic(){
		/* System-related variables */
		CalTrain ctrain = new CalTrain();
		ArrayList<Station> allStations = new ArrayList<Station>();
		ArrayList<Train> allTrains = new ArrayList<Train>();

		/* Passenger-related variables */
		int totalPassengers = 10;
		int passengersLeft = totalPassengers;	// Passengers left to be picked up
		int passengersServed = totalPassengers;	// Passengers who haven't arrived to their destination
		boolean trainsReturned = true;			// If trains haven't returned to Station 0

		/* Program running-related variables */
		int totalPassengersBoarded = 0;
		int totalNumSeats = 0;
		int threadsCompleted = 0;
		int maxFreeSeats = 5;
		int trainCtr = 0;
		int passCtr = 10;
		int maxInsert = 0;
		boolean loadTrainReturned = false;

		/* Temporary Variables */
		int inStationNum, freeSeats;
		Passenger tempRobot;
		Train tempTrain;

		/* Initialize Stations */
		for(int i=0;i<8;i++) {
			allStations.add(ctrain.station_init(i));
			if (i >= 1 && i < 8) {
				allStations.get(i-1).setRightStation(allStations.get(i));
				allStations.get(i).setLeftStation(allStations.get(i-1));
			}
		}
		System.out.println();	// Separate Station Initialization Printing

		/* Initialize Passengers */
		for(int i=0;i<totalPassengers;i++) 
		{
			inStationNum = (int)Math.floor(Math.random()*8);
			tempRobot = new Passenger(allStations.get(inStationNum), ctrain, i, allStations.get(CalTrainDriver.outStat(inStationNum)));
			threadsCompleted++;
			try {Thread.sleep(300);} catch(Exception e){}
		}
		
		if(totalNumSeats < totalPassengers) 
		{
			/* Establish Free Seats */
			freeSeats = 5;
			totalNumSeats += freeSeats;

			/* Train is entering first station */
			loadTrainReturned = false;
			tempTrain = new Train(allStations.get(0), ctrain, freeSeats, trainCtr);
			this.view.addTrain();
			loadTrainReturned = true;

			/* Indicates successful adding of Train */
			allTrains.add(tempTrain);
			trainCtr++;
		}
	}
}
