package caltrain;

import java.util.ArrayList;

public class TrackController {
	
	public ArrayList<Station> allStations = new ArrayList<Station>();
	public CalTrain model;
	public TrackView view;
	public static int totalPassServed = 0;
	
	public TrackController(CalTrain model, TrackView view){
		
		this.model = model;
		this.view = view;
		
		logic();
		
		view.scene.setOnKeyPressed(e -> {
			switch(e.getCode()){
			case ENTER: this.view.addTrain(); break;
			case P: this.view.anim.get(0).pause(); break;
			case O: this.view.anim.get(0).play(); break;
			}
		});
	}
	
	public void createPassenger(){
		Passenger p = new Passenger(allStations.get(0), model, 0, allStations.get(1));
	}
	
	public void logic(){
		/* System-related variables */
		CalTrain ctrain = new CalTrain();
		ArrayList<Station> allStations = new ArrayList<Station>();
		ArrayList<Train> allTrains = new ArrayList<Train>();

		/* Passenger-related variables */
		int totalPassengers = 10;
		int passengersLeft = totalPassengers;	// Passengers left to be picked up
		int passengersServed = totalPassengers;	// Passengers who haven't arrived to their destination
		boolean trainsReturned = true;			// If trains haven't returned to Station 0

		/* Program running-related variables */
		int totalPassengersBoarded = 0;
		int totalNumSeats = 0;
		int threadsCompleted = 0;
		int maxFreeSeats = 5;
		int trainCtr = 0;
		int passCtr = 10;
		int maxInsert = 0;
		boolean loadTrainReturned = false;

		/* Temporary Variables */
		int inStationNum, freeSeats;
		Passenger tempRobot;
		Train tempTrain;

		/* Initialize Stations */
		for(int i=0;i<8;i++) {
			allStations.add(ctrain.station_init(i));
			if (i >= 1 && i < 8) {
				allStations.get(i-1).setRightStation(allStations.get(i));
				allStations.get(i).setLeftStation(allStations.get(i-1));
			}
		}
		System.out.println();	// Separate Station Initialization Printing

		/* Initialize Passengers */
		for(int i=0;i<totalPassengers;i++) 
		{
			inStationNum = (int)Math.floor(Math.random()*8);
			tempRobot = new Passenger(allStations.get(inStationNum), ctrain, i, allStations.get(CalTrainDriver.outStat(inStationNum)));
			threadsCompleted++;
			try {Thread.sleep(300);} catch(Exception e){}
		}
		
		while(true) 
		{
			/* Add Trains into Railway if deficient */
			if(totalNumSeats < totalPassengers) 
			{
				/* Establish Free Seats */
				freeSeats = 5;
				totalNumSeats += freeSeats;

				/* Train is entering first station */
				loadTrainReturned = false;
				tempTrain = new Train(allStations.get(0), ctrain, freeSeats, trainCtr);
				loadTrainReturned = true;

				/* Indicates successful adding of Train */
				allTrains.add(tempTrain);
				trainCtr++;
			}

			/* Random generation of passengers */
			if (insertPass() && maxInsert < 5) {
				inStationNum = (int)Math.floor(Math.random()*8);
				tempRobot = new Passenger(allStations.get(inStationNum), ctrain, passCtr, 
										  allStations.get(CalTrainDriver.outStat(inStationNum)));
				threadsCompleted++;
				passCtr++;
				maxInsert++;
				totalPassengers++;
				passengersLeft++;
				passengersServed++;
				try {Thread.sleep(300);} catch(Exception e){}				
			}
		}

		if(totalPassengersBoarded == totalPassengers) {
			System.out.println("All Passengers served!");
			System.exit(0);
		}
	}
	
	public static int outStat(int num) {
		int number = (int)Math.floor(Math.random()*8);
		return (num != number) ? number : outStat(num);
	}

	public static boolean insertPass() {
		int number = (int)Math.floor(Math.random()*10);
		return (number >= 5) ? true : false;
	}
}
